/*
* Python Lexer
*
* Add backslash before:
*  Backslashes - \\
*  Double quote mark - \"
*
* Add double backslash before:
*  Left curly bracket - \\{
*/

{
    "aliases": ["python", "py"],
    "filenames": ["*.py", "*.pyw", "*.sc", "SConstruct", "SConscript"],
    "mimetypes": ["text/x-python", "application/x-python"],

	"class": "regex",

	"states":
	{
		"root":
		{
			"\n": "Text",
			"^(\\s*)(\"\"\"(?:.|\\n)*?\"\"\")": ["#bygroups", ["Text", "String.Doc"]],
			"^(\\s*)('''(?:.|\\n)*?''')": ["#bygroups", ["Text", "String.Doc"]],
			"[^\\S\\n]+": "Text",
			"#.*$": "Comment",
			"\\{\\}:(),;": "Punctuation",
			"\\\\\\n": "Text",
			"\\\\": "Text",
			"(in|is|and|or|not)\\b": "Operator.Word",
			"!=|==|<<|>>|[-~+/*%=<>&^|.]": "Operator",
			"#include": "keywords",
			"(def)((?:\\s|\\\\\\s)+)": ["#bygroups", ["Keyword", "Text"], "funcname"],
			"(class)((?:\\s|\\\\\\s)+)": ["#bygroups", ["Keyword", "Text"], "classname"],
			"(from)((?:\\s|\\\\\\s)+)": ["#bygroups", ["Keyword.Namespace", "Text"], "fromimport"],
			"(import)((?:\\s|\\\\\\s)+)": ["#bygroups", ["Keyword.Namespace", "Text"], "import"],
			"#include": "builtins",
			"#include": "backtick",
			"(?:[rR]|[uU][rR]|[rR][uU])\"\"\"": ["String", "tdqs"],
			"(?:[rR]|[uU][rR]|[rR][uU])'''": ["String", "tsqs"],
			"(?:[rR]|[uU][rR]|[rR][uU])\"": ["String", "dqs"],
			"(?:[rR]|[uU][rR]|[rR][uU])'": ["String", "sqs"],
			"[uU]?\"\"\"": ["String", ["stringescape", "tdqs"]],
			"[uU]?'''": ["String", ["stringescape", "tsqs"]],
			"[uU]?\"": ["String", ["stringescape", "dqs"]],
			"[uU]?'": ["String", ["stringescape", "sqs"]],
			"#include": "name",
			"#include": "numbers"
		},

		"keywords":
		{
			"(assert|break|continue|del|elif|else|except|exec|finally|for|global|if|lambda|pass|print|raise|return|try|while|yield|as|with)\\b": "Keyword"
		},

		"builtins":
		{
			"#content.builtins": "Name.Builtin",
			"(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True)\\b": "Name.Builtin.Pseudo", 
			"#content.exceptions": "Name.Exception"
		},

		"numbers":
		{
			"(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?": "Number.Float",
			"\\d+[eE][+-]?[0-9]+": "Number.Float",
			"0\\d+": "Number.Oct",
			"0[xX][a-fA-F0-9]+": "Number.Hex",
			"\\d+L": "Number.Integer.Long",
			"\\d+": "Number.Integer"
		},

		"backtick":
		{
			"`.*?`": "String.Backtick"
		},

		"name":
		{
			"@[a-zA-Z0-9_.]+": "Name.Decorator",
			"[a-zA-Z_][a-zA-Z0-9_]*": "Name"
		},

		"funcname":
		{
			"[a-zA-Z_][a-zA-Z0-9_]*": ["Name.Function", "#pop"]
		},

		"classname":
		{
			"[a-zA-Z_][a-zA-Z0-9_]*": ["Name.Class", "#pop"]
		},

		"import":
		{
			"((?:\\s|\\\\\\s)+)(as)((?:\\s|\\\\\\s)+)": ["#bygroups", ["Text", "Keyword.Namespace", "Text"]],
			"[a-zA-Z_][a-zA-Z0-9_.]*": "Name.Namespace",
			"(\\s*)(,)(\\s*)": ["#bygroups", ["Text", "Operator", "Text"]],
			"": ["Text", "#pop"] /* all else: go back */
		},

		"fromimport":
		{
			"((?:\\s|\\\\\\s)+)(import)\\b": ["#bygroups", ["Text", "Keyword.Namespace"], "#pop"],
			"[a-zA-Z_.][a-zA-Z0-9_.]*": "Name.Namespace"
		},

		"stringescape":
		{
			"\\\\([\\\\abfnrtv\"']|\\n|N\\{.*?}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})": "String.Escape"
		},

		"strings":
		{
			"%(\\([a-zA-Z0-9_]+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[diouxXeEfFgGcrs%]": "String.Interpol",
			"[^\\\\\\'\"%\\n]+": "String",
			/* quotes, percents and backslashes must be parsed one at a time */
			"[\\'\"\\\\]": "String",
			/* unhandled string formatting sign */
			"%": "String"
			/* newlines are an error (use "nl" state) */
		},

		"nl":
		{
			"\\n": "String"
		},

		"dqs":
		{
			"\"": ["String", "#pop"],
			"\\\\\\\\|\\\\\"|\\\\\\n": "String.Escape", /* included here again for raw strings */
			"#include": "strings"
		},

		"sqs":
		{
			"'": ["String", "#pop"],
			"\\\\\\\\|\\\\'|\\\\\\n": "String.Escape", /* included here again for raw strings */
			"#include": "strings"
		},

		"tdqs":
		{
			"\"\"\"": ["String", "#pop"],
			"#include": "strings",
			"#include": "nl"
		},

		"tsqs":
		{
			"'''": ["String", "#pop"],
			"#include": "strings",
			"#include": "nl"
		}
	},
	
	"patterns":
	{			
		"content.builtins":
		[
			"(?<!\\.)(__import__|abs|all|any|apply|basestring|bin|bool|buffer|",
			"bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|",
			"complex|delattr|dict|dir|divmod|enumerate|eval|execfile|exit|",
			"file|filter|float|frozenset|getattr|globals|hasattr|hash|hex|id|",
			"input|int|intern|isinstance|issubclass|iter|len|list|locals|",
			"long|map|max|min|next|object|oct|open|ord|pow|property|range|",
			"raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|",
			"sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|",
			"vars|xrange|zip)\\b"
		],

		"content.exceptions":
		[			
			"(?<!\\.)(ArithmeticError|AssertionError|AttributeError|",
			"BaseException|DeprecationWarning|EOFError|EnvironmentError|",
			"Exception|FloatingPointError|FutureWarning|GeneratorExit|IOError|",
			"ImportError|ImportWarning|IndentationError|IndexError|KeyError|",
			"KeyboardInterrupt|LookupError|MemoryError|NameError|",
			"NotImplemented|NotImplementedError|OSError|OverflowError|",
			"OverflowWarning|PendingDeprecationWarning|ReferenceError|",
			"RuntimeError|RuntimeWarning|StandardError|StopIteration|",
			"SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|",
			"TypeError|UnboundLocalError|UnicodeDecodeError|",
			"UnicodeEncodeError|UnicodeError|UnicodeTranslateError|",
			"UnicodeWarning|UserWarning|ValueError|VMSError|Warning|",
			"WindowsError|ZeroDivisionError)\\b"
		]
	}
}